INFO -- Device: cuda
INFO -- [92mTwo dimentional problem[0m
INFO -- 
INFO -- ================================================================================
INFO -- Learning parameters
INFO -- Length:                                           [92m1.0[0m
INFO -- Total time:                                       [92m1.0[0m
INFO -- Number of points in x:                            [92m100[0m
INFO -- Number of points in t:                            [92m100[0m
INFO -- Number of points in initial condition:            [92m300[0m
INFO -- Weight for interior loss:                         [92m1.0[0m
INFO -- Weight for initial condition loss:                [92m0.0[0m
INFO -- Weight for boundary loss:                         [92m1.0[0m
INFO -- Layers:                                           [92m4[0m
INFO -- Neurons per layer:                                [92m20[0m
INFO -- Epochs:                                           [92m1000[0m
INFO -- Learning rate:                                    [92m0.00125[0m
INFO -- ================================================================================
INFO -- 
INFO -- Creating [92m2D[0m BSpline
INFO -- Creating PINN with [92m4[0m layers and [92m20[0m neurons per layer
INFO -- Training PINN for [93m1000[0m epochs using [93mloss_fn_basic[0m loss function
INFO -- Training interrupted at epoch [91m1[0m
ERROR -- Exception occurred: CUDA out of memory. Tried to allocate 7.45 GiB (GPU 0; 8.00 GiB total capacity; 763.07 MiB already allocated; 5.84 GiB free; 766.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Traceback (most recent call last):
  File "C:\Users\macie\Documents\Studia\Magisterka\PINN_IGA_Masters\NN_tools.py", line 45, in train_model
    loss: torch.Tensor = loss_fn(nn_approximator)
  File "C:\Users\macie\Documents\Studia\Magisterka\PINN_IGA_Masters\loss_functions.py", line 523, in compute_loss
    weight_f * interior_loss_function(model, x, t, dims=dims, test_function=test_function)
  File "C:\Users\macie\Documents\Studia\Magisterka\PINN_IGA_Masters\loss_functions.py", line 105, in interior_loss_basic
    dfdxdx_model = dfdx(model, x, t, order=2).to(device) if isinstance(model, PINN) else model.calculate_BSpline_2D_deriv_dxdx(x, t, mode=mode).to(device)
  File "C:\Users\macie\Documents\Studia\Magisterka\PINN_IGA_Masters\differential_tools.py", line 67, in dfdx
    f_value = f(model, x, t)
  File "C:\Users\macie\Documents\Studia\Magisterka\PINN_IGA_Masters\differential_tools.py", line 17, in f
    value = model(x, t)
  File "C:\Users\macie\AppData\Local\Programs\Python\Python310\lib\site-packages\torch\nn\modules\module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\macie\Documents\Studia\Magisterka\PINN_IGA_Masters\PINN.py", line 37, in forward
    out = self.act(self.layer_in(x_stack))
  File "C:\Users\macie\AppData\Local\Programs\Python\Python310\lib\site-packages\torch\nn\modules\module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\macie\AppData\Local\Programs\Python\Python310\lib\site-packages\torch\nn\modules\linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 7.45 GiB (GPU 0; 8.00 GiB total capacity; 763.07 MiB already allocated; 5.84 GiB free; 766.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
INFO -- Training took [92m2.11[0m seconds
INFO -- Creating plots and saving to files. Dimensions: 2
